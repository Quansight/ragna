[build-system]
requires = [
    "setuptools>=64",
    "setuptools_scm[toml]>=8",
]
build-backend = "setuptools.build_meta"

[project]
name = "Ragna"
description = "RAG orchestration framework"
license = "BSD-3-Clause"
license-files = ["LICENSE"]
authors = [
    { name = "Ragna Development Team", email = "connect@quansight.com" },
]
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10,<3.14"
dependencies = [
    "aiofiles",
    "fastapi",
    "httpx",
    "packaging",
    "panel[fastapi]==1.5.4",
    "pydantic>=2",
    "pydantic-core",
    "pydantic-settings[toml]>=2.3",
    "PyJWT",
    "python-multipart",
    "questionary",
    "rich",
    "sqlalchemy>=2",
    "starlette",
    "tomlkit",
    "typer",
    "uvicorn",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://ragna.chat"
Documentation = "https://ragna.chat"
Changelog = "https://ragna.chat/en/stable/references/release-notes/"
Repository = "https://github.com/Quansight/ragna"

[project.optional-dependencies]
# to update the array below, run scripts/update_optional_dependencies.py
all = [
    "chromadb>=1.0.13",
    "httpx_sse",
    "ijson",
    "lancedb>=0.2",
    "pyarrow",
    "pymupdf",
    "python-docx",
    "python-pptx",
    "qdrant-client>=1.12.1",
    "tiktoken",
]

[tool.setuptools_scm]
write_to = "ragna/_version.py"
version_scheme = "release-branch-semver"
local_scheme = "node-and-date"

[project.scripts]
ragna = "ragna.__main__:app"

[tool.setuptools.packages.find]
include = [
    "ragna*",
]

[dependency-groups]
lint = [
    "mypy==1.10.0",
    "pre-commit>=4.2.0,<5",
    "sqlalchemy-stubs>=0.4,<0.5",
    "types-aiofiles>=24.1.0.20250326,<25",
    "types-redis>=4.6.0.20241004,<5",
]
test = [
    "httpx-sse>=0.4.0,<0.5",
    "ijson>=3.3.0,<4",
    "pytest>=6,<9",
    "pytest-asyncio>=0.26.0,<0.27",
    "pytest-mock>=3.14.0,<4",
    "pytest-playwright>=0.7.0,<0.8",
    "sse-starlette>=2.2.1,<3",
]
docs = [
    "material-plausible-plugin>=0.3.0,<0.4",
    "mdx-truly-sane-lists>=1.3,<2",
    "mkdocs>=1.6.1,<2",
    "mkdocstrings[python]>=0.29.1,<0.30",
    "mkdocs-gallery>=0.10.3,<0.11",
    "mkdocs-gen-files>=0.5.0,<0.6",
    "mkdocs-material>=9.6.11,<10",
]
build = [
    "build",
    "setuptools-scm>=8.2.0,<9",
]
dev = [
    {include-group = "lint"},
    {include-group = "test"},
    {include-group = "docs"},
    {include-group = "build"},
]

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "win-64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
Ragna = { path = ".", editable = true }

[tool.pixi.environments]
base-py310 = { features = ["dev", "py310"], solve-group = "py310" }
base-py311 = { features = ["dev", "py311"], solve-group = "py311" }
base-py312 = { features = ["dev", "py312"], solve-group = "py312" }
base-py313 = { features = ["dev", "py313"], solve-group = "py313" }
all-py310 = { features = ["dev", "py310", "all"], solve-group = "py310" }
all-py311 = { features = ["dev", "py311", "all"], solve-group = "py311" }
all-py312 = { features = ["dev", "py312", "all"], solve-group = "py312" }
all-py313 = { features = ["dev", "py313", "all"], solve-group = "py313" }
all-docker = {features = ["py313", "all"], solve-group="py313"}

[tool.pixi.dependencies]
python = ">=3.10,<3.14"

[tool.pixi.feature.dev.dependencies]
git-lfs = "*"

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.feature.py313.dependencies]
python = "3.13.*"

[tool.pixi.feature.dev.tasks]
optional-dependencies = { cmd="python scripts/update_optional_dependencies.py || git diff --exit-code pyproject.toml" }
build = { cmd="python -m build" }

[tool.pixi.feature.dev.tasks.pre-commit]
# Ideally, we should not need to manually define arguments `show_diff` and `colorize_output` and instead
# just pass them as CLI arguments to the `pre-commit` Pixi task. This does not seem to be supported.
# When it is supported, we should remove the argument definitions, as they will have become unnecessary.
cmd = "pre-commit run {{ which_files }} {{ show_diff }} {{ colorize_output }}"
args = [
    { "arg" = "which_files", "default" = "--files $(git diff --name-only HEAD | tr '\n' ' ')" },
    { "arg" = "show_diff", "default" = "" },
    { "arg" = "colorize_output", "default" = "" },
]

[tool.pixi.feature.all.tasks]
types = { cmd="mypy" }
test = { cmd="pytest" }

[tool.pixi.feature.all.tasks.ci]
depends-on = [
    { "task" = "pre-commit", "args" = ["--all-files"] },
    "optional-dependencies",
    "types",
    "test",
    "build",
]

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",
    "F",
    "I001",
    "B",
    "C4",
    "ISC",
    "RET",
    "SIM",
    "PTH",
]

ignore = [
    # Conflicts with ruff formatter
    "ISC001",
    # Ignore line too long, because due to black, the error can only occur for strings
    "E501",
    # cache has its purpose
    "B019",
    # built-in open() is well understood
    "PTH123",
]

[tool.ruff.lint.per-file-ignores]
# ignore unused imports and imports not at the top of the file in __init__.py files
"__init__.py" = ["F401", "E402"]
# The examples often have imports below the top of the file to follow the narrative
"docs/examples/**/*.py" = ["E402", "F704", "I001"]
"docs/tutorials/**/*.py" = ["E402", "F704", "I001"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --tb=short --asyncio-mode=auto --ignore tests/deploy/ui"
asyncio_default_fixture_loop_scope = "function"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::ResourceWarning",
    # https://github.com/chroma-core/chroma/issues/4190
    "ignore:Accessing the 'model_fields':pydantic.warnings.PydanticDeprecatedSince211",
    # https://github.com/chroma-core/chroma/issues/4193
    "ignore:Python 3.14 will:DeprecationWarning",
    # https://github.com/lancedb/lancedb/issues/2315
    "ignore:Support for class-based `config`:pydantic.warnings.PydanticDeprecatedSince20",
    # https://github.com/pymupdf/PyMuPDF/issues/4392
    "ignore:builtin type \\w+ has no __module__ attribute:DeprecationWarning",
    # https://github.com/qdrant/qdrant-client/issues/983
    # Remove when Qdrant fixes this
    "ignore:invalid escape sequence:SyntaxWarning",
    "ignore:invalid escape sequence:DeprecationWarning",
]
xfail_strict = true

[tool.mypy]

files = "ragna"

plugins = [
    "sqlmypy",
]

show_error_codes = true
pretty = true

disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

allow_redefinition = true
no_implicit_optional = true

warn_redundant_casts = true
warn_unused_ignores = true

warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "ragna.deploy._ui.*",
]
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    # FIXME: the package should be typed
    "bokeh_fastapi",
    "bokeh_fastapi.handler",
    "docx",
    "email-validator",
    "fitz",
    "ijson",
    "lancedb",
    "param",
    "pptx",
    "pyarrow",
    "sentence_transformers",
    "traitlets",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "ragna.deploy._orm",
]
# Our ORM schema doesn't really work with mypy. There are some other ways to define it
# to play ball. We should do that in the future.
disable_error_code = [
    "var-annotated",
]

[[tool.mypy.overrides]]
# 1. We automatically handle user-defined sync and async methods
# 2. It is a fundamental feature of the RAG components to request more parameters than
#    the base class.
# Thus, we just silence mypy where it would complain about the points above.
module = [
    "ragna.deploy._auth",
    "ragna.source_storages.*",
    "ragna.assistants.*"
]
disable_error_code = [
    "override",
]
