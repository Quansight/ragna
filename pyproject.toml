[build-system]
requires = [
    "setuptools>=64",
    "setuptools_scm[toml]>=8",
]
build-backend = "setuptools.build_meta"

[project]
name = "Ragna"
description = "RAG orchestration framework"
license = {file = "LICENSE"}
authors = [
    { name = "Ragna Development Team", email = "connect@quansight.com" },
]
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
dependencies = [
    "aiofiles",
    "fastapi",
    "httpx",
    "packaging",
    # Removing `panel[fastapi]` in favor of the below pinned `panel` and `bokeh-fastapi` dependencies
    # is a temporary fix for https://github.com/Quansight/ragna/issues/565
    # The problem is that ChromaDB hard pins `fastapi`, which then creates conflicts with `panel[fastapi]`.
    # See https://github.com/chroma-core/chroma/issues/4243
    # TODO: Revert this change by replacing the `panel` and `bokeh-fastapi` dependencies with the
    # commented out `panel[fastapi]` dependency when ChromaDB fixes this issue.
    # "panel[fastapi]==1.5.4",
    "panel==1.5.4",
    "bokeh-fastapi>=0.1.3",
    "pydantic>=2",
    "pydantic-core",
    "pydantic-settings>=2",
    "PyJWT",
    "python-multipart",
    "questionary",
    "rich",
    "sqlalchemy>=2",
    "starlette",
    "tomlkit",
    "typer",
    "uvicorn",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://ragna.chat"
Documentation = "https://ragna.chat"
Changelog = "https://ragna.chat/en/stable/references/release-notes/"
Repository = "https://github.com/Quansight/ragna"

[project.optional-dependencies]
# to update the array below, run scripts/update_optional_dependencies.py
all = [
    "chromadb>=1.0.0",
    "httpx_sse",
    "ijson",
    "lancedb>=0.2",
    "pyarrow",
    "pymupdf<=1.24.10,>=1.23.6",
    "python-docx",
    "python-pptx",
    "qdrant-client>=1.12.1",
    "tiktoken",
]

[tool.setuptools_scm]
write_to = "ragna/_version.py"
version_scheme = "release-branch-semver"
local_scheme = "node-and-date"

[project.scripts]
ragna = "ragna.__main__:app"

[tool.setuptools.packages.find]
include = [
    "ragna*",
]

[tool.ruff.lint]
select = [
    "E",
    "F",
    # import sorting
    "I001"
]
# Ignore line too long, because due to black, the error can only occur for strings
ignore = ["E501"]

[tool.ruff.lint.per-file-ignores]
# ignore unused imports and imports not at the top of the file in __init__.py files
"__init__.py" = ["F401", "E402"]
# The examples often have imports below the top of the file to follow the narrative
"docs/examples/**/*.py" = ["E402", "F704", "I001"]
"docs/tutorials/**/*.py" = ["E402", "F704", "I001"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --tb=short --asyncio-mode=auto --ignore tests/deploy/ui"
asyncio_default_fixture_loop_scope = "function"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::ResourceWarning",
    # https://github.com/chroma-core/chroma/issues/4190
    "ignore:Accessing the 'model_fields':pydantic.warnings.PydanticDeprecatedSince211",
    # https://github.com/chroma-core/chroma/issues/4193
    "ignore:Python 3.14 will:DeprecationWarning",
    # https://github.com/lancedb/lancedb/issues/2315
    "ignore:Support for class-based `config`:pydantic.warnings.PydanticDeprecatedSince20",
]
xfail_strict = true

[tool.mypy]

files = "ragna"

plugins = [
    "sqlmypy",
]

show_error_codes = true
pretty = true

disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

allow_redefinition = true
no_implicit_optional = true

warn_redundant_casts = true
warn_unused_ignores = true

warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "ragna.deploy._ui.*",
]
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    # FIXME: the package should be typed
    "bokeh_fastapi",
    "bokeh_fastapi.handler",
    "docx",
    "fitz",
    "ijson",
    "lancedb",
    "param",
    "pptx",
    "pyarrow",
    "sentence_transformers",
    "traitlets",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "ragna.deploy._orm",
]
# Our ORM schema doesn't really work with mypy. There are some other ways to define it
# to play ball. We should do that in the future.
disable_error_code = [
    "var-annotated",
]

[[tool.mypy.overrides]]
# 1. We automatically handle user-defined sync and async methods
# 2. It is a fundamental feature of the RAG components to request more parameters than
#    the base class.
# Thus, we just silence mypy where it would complain about the points above.
module = [
    "ragna.deploy._auth",
    "ragna.source_storages.*",
    "ragna.assistants.*"
]
disable_error_code = [
    "override",
]

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.pypi-dependencies]
Ragna = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
all = { features = ["all"], solve-group = "default" }

[tool.pixi.tasks]

[tool.pixi.dependencies]
python = "3.10.*"
