[build-system]
requires = [
    "setuptools>=45",
    "setuptools_scm[toml]>=6.2",
]
build-backend = "setuptools.build_meta"

[project]
name = "Ragna"
authors = [
    { name = "Ragna Development Team", email = "connect@quansight.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.9"
dependencies = [
    "aiofiles",
    "fastapi",
    "huey",
    "httpx",
    "importlib_metadata>=4.6; python_version<'3.10'",
    "packaging",
    "pydantic>=2",
    "pydantic-settings>=2",
    "PyJWT",
    "python-multipart",
    "redis",
    "questionary",
    "rich",
    "sqlalchemy>=2",
    "tomlkit",
    "typer",
    "uvicorn",
]
dynamic = ["version"]

[project.optional-dependencies]
# to update the array below, run scripts/update_optional_dependencies.py
builtin = [
    "chromadb>=0.4.13",
    "lancedb>=0.2",
    "pyarrow",
    "pymupdf",
    "tiktoken",
]

[tool.setuptools_scm]
write_to = "ragna/_version.py"
local_scheme = "node-and-timestamp"

[project.scripts]
ragna = "ragna._cli:app"

[tool.setuptools.packages.find]
include = [
    "ragna*",
]

[tool.usort.known]
# TODO: remove this with usort>=1.1
third_party = ["panel"]

[tool.ruff]
select = [
    "E",
    "F",
    # import sorting
    "I001"
]
# Ignore line too long, because due to black, the error can only occur for strings
ignore = ["E501"]

[tool.ruff.per-file-ignores]
# ignore unused imports and imports not at the top of the file in __init__.py files
"__init__.py" = ["F401", "E402"]
"*.ipynb" = ["E402"]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --tb=short"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    # FIXME: find a way to use the BaseSettings from pydantic-settings with ConfigDict
    "ignore:Support for class-based `config` is deprecated:pydantic.warnings.PydanticDeprecatedSince20",
]
xfail_strict = true

[tool.mypy]

files = "ragna"

show_error_codes = true
pretty = true

disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

allow_redefinition = true
no_implicit_optional = true

warn_redundant_casts = true
warn_unused_ignores = true

warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "fitz",
    "huey.*",
    "lancedb",
    "pyarrow",
    "sentence_transformers",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "ragna._api.orm",
]
# Our ORM schema doesn't really work with mypy. There are some other ways to define it
# to play ball. We should do that in the future.
disable_error_code = [
    "var-annotated",
]

[[tool.mypy.overrides]]
# It is a fundamental feature of the components to request more parameters than the base
# class. Thus, we just silence mypy here.
module = [
    "ragna.source_storages.*",
    "ragna.assistants.*"
]
disable_error_code = [
    "override",
]
